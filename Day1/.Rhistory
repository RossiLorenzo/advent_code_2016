library(dplyr)
library(readr)
setwd("~/Google Drive/MedicAnimal/EmailsRetargeting/")
# Set parameters
dated = "October"
year = 2016
# Format dates
mindate = as.Date(paste(year, which(month.name %in% dated), 01, sep = "-"))
maxdate = as.character(seq(mindate, mindate + 120, "1 month")[2] - 1)
mindate = as.character(mindate)
query_file_ypop = "ypop_emails.sql"
query_ypop = readChar(query_file_ypop, file.size(query_file_ypop))
query_ypop = gsub("__MINDATE__", mindate, query_ypop)
query_ypop = gsub("__MAXDATE__", maxdate, query_ypop);
ypop = presto(query_ypop)
View(ypop)
list.files(".", pattern = "csv")
i = list.files(".", pattern = "csv")
gsub("[0-9].*", "", i)
list.files(".", pattern = "csv")
i = list.files(".", pattern = "csv")
gsub("_[0-9].*", "", i)
i = list.files(".", pattern = "csv")[1]
read_csv(i)
for(i in list.files(".", pattern = "csv")){
assign(gsub("_[0-9].*", "", i), read_csv(i))
}
all_emails = bind_rows(
net_contribution,
retail_margin,
last_purchased,
brand_sale,
category_sale,
ypop
)
View(all_emails)
for(i in list.files(".", pattern = "csv")){
assign(gsub("_[0-9].*", "", i), read_csv(i, "ccccccccddccccc"))
}
for(i in list.files(".", pattern = "csv")){
assign(gsub("_[0-9].*", "", i), read_csv(i, col_types = "ccccccccddccccc"))
}
all_emails = bind_rows(
net_contribution,
retail_margin,
last_purchased,
brand_sale,
category_sale,
ypop
)
View(all_emails)
write_csv(all_emails, paste0("all_emails_", format(as.Date(maxdate), "%d%m%Y"), ".csv"))
query_ypop = readChar(query_file_ypop, file.size(query_file_ypop))
query_ypop = gsub("__MINDATE__", mindate, query_ypop)
query_ypop = gsub("__MAXDATE__", maxdate, query_ypop);
ypop = presto(query_ypop)
View(ypop)
x = presto("
SELECT REPLACE(product_sku, 'STALE', '') as product_sku, website_name,
promotiondescription AS promotion_description, end_date AS promotion_end_date
FROM medicanimal_ftp_products_promoted, all_dates
WHERE
dated = {{yesterday}} AND
funded_type = 'MFUN' AND promotion_expired = 'No' and product_sku LIKE '%I0003309%'")
x = presto("
SELECT REPLACE(product_sku, 'STALE', '') as product_sku, website_name,
promotiondescription AS promotion_description, end_date AS promotion_end_date
FROM medicanimal_ftp_products_promoted
WHERE
dated = {{yesterday}} AND
funded_type = 'MFUN' AND promotion_expired = 'No' and product_sku LIKE '%I0003309%'")
View(x)
# Libraries
library(F3D.Utilities)
library(dplyr)
library(readr)
setwd("~/Google Drive/MedicAnimal/EmailsRetargeting/")
# Set parameters
dated = "October"
year = 2016
# Format dates
mindate = as.Date(paste(year, which(month.name %in% dated), 01, sep = "-"))
maxdate = as.character(seq(mindate, mindate + 120, "1 month")[2] - 1)
mindate = as.character(mindate)
# Query - Net Contribution
query_file_net_contribution = "net_contribution_emails.sql"
query_net_contribution = readChar(query_file_net_contribution, file.size(query_file_net_contribution))
query_net_contribution = gsub("__MINDATE__", mindate, query_net_contribution)
query_net_contribution = gsub("__MAXDATE__", maxdate, query_net_contribution);
net_contribution = presto(query_net_contribution)
write_csv(net_contribution, paste0("net_contribution_", format(as.Date(maxdate), "%d%m%Y"), ".csv"))
# Query - Retail Margin
query_file_retail_margin = "retail_margin_emails.sql"
query_retail_margin = readChar(query_file_retail_margin, file.size(query_file_retail_margin))
query_retail_margin = gsub("__MINDATE__", mindate, query_retail_margin)
query_retail_margin = gsub("__MAXDATE__", maxdate, query_retail_margin)
retail_margin = presto(query_retail_margin)
write_csv(retail_margin, paste0("retail_margin_", format(as.Date(maxdate), "%d%m%Y"), ".csv"))
# Query - Last Purchased
query_file_last_purchased = "last_purchased_emails.sql"
query_last_purchased = readChar(query_file_last_purchased, file.size(query_file_last_purchased))
query_last_purchased = gsub("__MINDATE__", mindate, query_last_purchased)
query_last_purchased = gsub("__MAXDATE__", maxdate, query_last_purchased);
last_purchased = presto(query_last_purchased)
write_csv(last_purchased, paste0("last_purchased_", format(as.Date(maxdate), "%d%m%Y"), ".csv"))
# Query - Category Sale
query_file_category_sale = "category_sale_emails.sql"
query_category_sale = readChar(query_file_category_sale, file.size(query_file_category_sale))
query_category_sale = gsub("__MINDATE__", mindate, query_category_sale)
query_category_sale = gsub("__MAXDATE__", maxdate, query_category_sale);
category_sale = presto(query_category_sale)
write_csv(category_sale, paste0("category_sale_", format(as.Date(maxdate), "%d%m%Y"), ".csv"))
# Query - Brand Sale
query_file_brand_sale = "brand_sale_emails.sql"
query_brand_sale = readChar(query_file_brand_sale, file.size(query_file_brand_sale))
query_brand_sale = gsub("__MINDATE__", mindate, query_brand_sale)
query_brand_sale = gsub("__MAXDATE__", maxdate, query_brand_sale);
brand_sale = presto(query_brand_sale)
write_csv(brand_sale, paste0("brand_sale_", format(as.Date(maxdate), "%d%m%Y"), ".csv"))
# Query - YPOP
query_file_ypop = "ypop_emails.sql"
query_ypop = readChar(query_file_ypop, file.size(query_file_ypop))
query_ypop = gsub("__MINDATE__", mindate, query_ypop)
query_ypop = gsub("__MAXDATE__", maxdate, query_ypop);
ypop = presto(query_ypop)
write_csv(ypop, paste0("ypop_", format(as.Date(maxdate), "%d%m%Y"), ".csv"))
query_file_retail_margin = "retail_margin_emails.sql"
query_retail_margin = readChar(query_file_retail_margin, file.size(query_file_retail_margin))
query_retail_margin = gsub("__MINDATE__", mindate, query_retail_margin)
query_retail_margin = gsub("__MAXDATE__", maxdate, query_retail_margin)
retail_margin = presto(query_retail_margin)
query_file_ypop = "ypop_emails.sql"
query_ypop = readChar(query_file_ypop, file.size(query_file_ypop))
query_ypop = gsub("__MINDATE__", mindate, query_ypop)
query_ypop = gsub("__MAXDATE__", maxdate, query_ypop);
ypop = presto(query_ypop)
write_csv(ypop, paste0("ypop_", format(as.Date(maxdate), "%d%m%Y"), ".csv"))
all_emails = bind_rows(
net_contribution,
retail_margin,
last_purchased,
brand_sale,
category_sale,
ypop
)
write_csv(all_emails, paste0("all_emails_", format(as.Date(maxdate), "%d%m%Y"), ".csv"))
all_emails = do.call(rbind, list(
net_contribution,
retail_margin,
last_purchased,
brand_sale,
category_sale,
ypop
))
write_csv(all_emails, paste0("all_emails_", format(as.Date(maxdate), "%d%m%Y"), ".csv"))
setwd("~/My_Repos/advent_code_2016/Day1/")
my_sequence = readChar("Input1_1.txt", file.size("Input1_1.txt"))
strsplit(my_sequence, ",", fixed = T)
my_sequence = strsplit(my_sequence, ",", fixed = T)[[1]]
next_step = my_sequence[1]
facing_direction = "N"
gsub("[0-9]", "", my_sequence)
gsub("[0-9]| ", "", next_step)
gsub("[0-9]| ", "", my_sequence)
gsub("L|R| ", "", next_step)
as.numeric(gsub("L|R| ", "", my_sequence))
# Create a function that follows one instruction
one_interaction = function(position, facing_direction, next_step){
turning = gsub("[0-9]| ", "", next_step)
steps = as.numeric(gsub("L|R| ", "", next_step))
# Case of facing north
if(facing_direction == "N"){
if(turning == "L")
return(list(position = position + c(-steps, 0), facing_direction = "E"))
return(list(position = position + c(steps, 0), facing_direction = "W"))
}
# Case of facing south
if(facing_direction == "S"){
if(turning == "L")
return(list(position = position + c(steps, 0), facing_direction = "W"))
return(list(position = position + c(-steps, 0), facing_direction = "E"))
}
# Case of facing east
if(facing_direction == "E"){
if(turning == "L")
return(list(position = position + c(0, -steps), facing_direction = "S"))
return(list(position = position + c(0, steps), facing_direction = "N"))
}
# Case of facing west
if(facing_direction == "W"){
if(turning == "L")
return(list(position = position + c(0, steps), facing_direction = "N"))
return(list(position = position + c(0, -steps), facing_direction = "S"))
}
}
# Loop over the instructions to reach the final destination
my_direction = "N"
position = c(0, 0)
next_interaction = "R4"
tmp_res = one_interaction(position, my_direction, next_interaction)
tmp_res
my_direction = "N"
position = c(0, 0)
for(next_interaction in my_sequence){
tmp_res = one_interaction(position, my_direction, next_interaction)
my_direction = tmp_res$facing_direction
position = tmp_res$position
}
position
position^2
sum(position^2)
sqrt(sum(position^2))
sum(position)
paste("Easter Bunny HQ is:", sum(position), "blocks away")
paste("Easter Bunny HQ is", sum(position), "blocks away")
my_direction = "N"
position = c(0, 0)
visited = list()
for(next_interaction in my_sequence){
tmp_res = one_interaction(position, my_direction, next_interaction)
my_direction = tmp_res$facing_direction
position = tmp_res$position
visited = c(visited, position)
}
my_direction = "N"
position = c(0, 0)
visited = list()
for(next_interaction in my_sequence){
tmp_res = one_interaction(position, my_direction, next_interaction)
my_direction = tmp_res$facing_direction
position = tmp_res$position
visited = c(visited, list(position))
}
list(c(1,1), c(1,2))
a = list(c(1,1), c(1,2))
length(a)
length(unique(a))
a = list(c(1,1), c(1,2), c(1,1))
length(a)
length(unique(a))
my_direction = "N"
position = c(0, 0)
visited = list()
for(next_interaction in my_sequence){
tmp_res = one_interaction(position, my_direction, next_interaction)
my_direction = tmp_res$facing_direction
position = tmp_res$position
visited = c(visited, list(position))
if(length(visited) != length(unique(visited)))
break
}
position
paste("Actually, Easter Bunny HQ is", sum(position), "blocks away")
position
my_direction = "N"
position = c(0, 0)
visited = list()
for(next_interaction in c("R8, R4, R4, R8")){
tmp_res = one_interaction(position, my_direction, next_interaction)
my_direction = tmp_res$facing_direction
position = tmp_res$position
visited = c(visited, list(position))
if(length(visited) != length(unique(visited)))
break
}
my_direction = "N"
position = c(0, 0)
visited = list()
for(next_interaction in c("R8", "R4", "R4", "R8")){
tmp_res = one_interaction(position, my_direction, next_interaction)
my_direction = tmp_res$facing_direction
position = tmp_res$position
visited = c(visited, list(position))
if(length(visited) != length(unique(visited)))
break
}
position
my_direction = "N"
position = c(0, 0)
visited = list()
tmp_res = one_interaction(position, my_direction, next_interaction)
tmp_res
position
my_direction = "N"
position = c(0, 0)
visited = list()
tmp_res = one_interaction(position, my_direction, next_interaction)
my_direction = tmp_res$facing_direction
tmp_res$position
seq(position, tmp_res$position)
seq(position[1], tmp_res$position)
tmp_res$position
position
seq(position[1], tmp_res$position, 1)
seq(position[1], tmp_res$position[1])
seq(position[2], tmp_res$position[2])
expand.grid(seq(position[1], tmp_res$position[1]),
seq(position[2], tmp_res$position[2]))
c(seq(position[1], tmp_res$position[1]),
seq(position[2], tmp_res$position[2]))
expand.grid(seq(position[1], tmp_res$position[1]),
seq(position[2], tmp_res$position[2]))
apply(expand.grid(seq(position[1], tmp_res$position[1]),
seq(position[2], tmp_res$position[2])), 1, list)
apply(expand.grid(seq(position[1], tmp_res$position[1]),
seq(position[2], tmp_res$position[2])), 1, c)
lapply(expand.grid(seq(position[1], tmp_res$position[1]),
seq(position[2], tmp_res$position[2])), c)
seq(position[1], tmp_res$position[1])
seq(position[2], tmp_res$position[2])
do.call(c, list(c(1,2), 3))
length(x_seq) == 1
x_seq = seq(position[1], tmp_res$position[1])
y_seq = seq(position[2], tmp_res$position[2])
#
length(x_seq) == 1
y_seq
y_seq
my_direction = "N"
position = c(0, 0)
visited = list()
first_visited = NULL; k = FALSE
for(next_interaction in c("R8", "R4", "R4", "R8")){
tmp_res = one_interaction(position, my_direction, next_interaction)
my_direction = tmp_res$facing_direction
# Get all points in the middle
x_seq = seq(position[1], tmp_res$position[1])
y_seq = seq(position[2], tmp_res$position[2])
# One of the two will be long 1 the other will >= 1
if(length(x_seq) == 1){
for(i in y_seq){
visited = c(visited, list(c(x_seq, i)))
if(length(visited) != length(unique(visited)) & !k){
k = TRUE
first_visited = c(x_seq, i)
}
}
}else{
for(i in x_seq){
visited = c(visited, list(c(i, y_seq)))
if(length(visited) != length(unique(visited)) & !k){
k = TRUE
first_visited = c(i, y_seq)
}
}
}
position = tmp_res$position
}
first_visited
my_direction = "N"
position = c(0, 0)
visited = list()
first_visited = NULL; k = FALSE
for(next_interaction in c("R8", "R4", "R4", "R8")){
tmp_res = one_interaction(position, my_direction, next_interaction)
my_direction = tmp_res$facing_direction
# Get all points in the middle
x_seq = seq(position[1], tmp_res$position[1])
y_seq = seq(position[2], tmp_res$position[2])
# One of the two will be long 1 the other will >= 1
if(length(x_seq) == 1){
for(i in y_seq[-1]){
visited = c(visited, list(c(x_seq, i)))
if(length(visited) != length(unique(visited)) & !k){
k = TRUE
first_visited = c(x_seq, i)
}
}
}else{
for(i in x_seq[-1]){
visited = c(visited, list(c(i, y_seq)))
if(length(visited) != length(unique(visited)) & !k){
k = TRUE
first_visited = c(i, y_seq)
}
}
}
position = tmp_res$position
}
my_direction = "N"
position = c(0, 0)
visited = list()
first_visited = NULL; k = FALSE
for(next_interaction in my_sequence){
tmp_res = one_interaction(position, my_direction, next_interaction)
my_direction = tmp_res$facing_direction
# Get all points in the middle
x_seq = seq(position[1], tmp_res$position[1])
y_seq = seq(position[2], tmp_res$position[2])
# One of the two will be long 1 the other will >= 1
if(length(x_seq) == 1){
for(i in y_seq[-1]){
visited = c(visited, list(c(x_seq, i)))
if(length(visited) != length(unique(visited)) & !k){
k = TRUE
first_visited = c(x_seq, i)
}
}
}else{
for(i in x_seq[-1]){
visited = c(visited, list(c(i, y_seq)))
if(length(visited) != length(unique(visited)) & !k){
k = TRUE
first_visited = c(i, y_seq)
}
}
}
position = tmp_res$position
}
paste("Actually, Easter Bunny HQ is", sum(position), "blocks away")
paste("Actually, Easter Bunny HQ is", sum(first_visited), "blocks away")
###################### PART 2 ######################
my_direction = "N"
position = c(0, 0)
visited = list()
first_visited = NULL; k = FALSE
for(next_interaction in c("R8", "R4", "R4", "R8")){
tmp_res = one_interaction(position, my_direction, next_interaction)
my_direction = tmp_res$facing_direction
# Get all points in the middle
x_seq = seq(position[1], tmp_res$position[1])
y_seq = seq(position[2], tmp_res$position[2])
# One of the two will be long 1 the other will >= 1
if(length(x_seq) == 1){
for(i in y_seq[-1]){
visited = c(visited, list(c(x_seq, i)))
if(length(visited) != length(unique(visited)) & !k){
k = TRUE
first_visited = c(x_seq, i)
}
}
}else{
for(i in x_seq[-1]){
visited = c(visited, list(c(i, y_seq)))
if(length(visited) != length(unique(visited)) & !k){
k = TRUE
first_visited = c(i, y_seq)
}
}
}
position = tmp_res$position
}
# To get there the shortest way is the sum of the coordinates
paste("Actually, Easter Bunny HQ is", sum(first_visited), "blocks away")
my_sequence
my_direction = "N"
position = c(0, 0)
visited = list()
first_visited = NULL; k = FALSE
for(next_interaction in c("R8", "R1", "R4", "R8")){
tmp_res = one_interaction(position, my_direction, next_interaction)
my_direction = tmp_res$facing_direction
# Get all points in the middle
x_seq = seq(position[1], tmp_res$position[1])
y_seq = seq(position[2], tmp_res$position[2])
# One of the two will be long 1 the other will >= 1
if(length(x_seq) == 1){
for(i in y_seq[-1]){
visited = c(visited, list(c(x_seq, i)))
if(length(visited) != length(unique(visited)) & !k){
k = TRUE
first_visited = c(x_seq, i)
}
}
}else{
for(i in x_seq[-1]){
visited = c(visited, list(c(i, y_seq)))
if(length(visited) != length(unique(visited)) & !k){
k = TRUE
first_visited = c(i, y_seq)
}
}
}
position = tmp_res$position
}
first_visited
my_direction = "N"
position = c(0, 0)
visited = list()
first_visited = NULL; k = FALSE
for(next_interaction in my_sequence){
tmp_res = one_interaction(position, my_direction, next_interaction)
my_direction = tmp_res$facing_direction
# Get all points in the middle
x_seq = seq(position[1], tmp_res$position[1])
y_seq = seq(position[2], tmp_res$position[2])
# One of the two will be long 1 the other will >= 1
if(length(x_seq) == 1){
for(i in y_seq[-1]){
visited = c(visited, list(c(x_seq, i)))
if(length(visited) != length(unique(visited)) & !k){
k = TRUE
first_visited = c(x_seq, i)
}
}
}else{
for(i in x_seq[-1]){
visited = c(visited, list(c(i, y_seq)))
if(length(visited) != length(unique(visited)) & !k){
k = TRUE
first_visited = c(i, y_seq)
}
}
}
position = tmp_res$position
}
# To get there the shortest way is the sum of the coordinates
paste("Actually, Easter Bunny HQ is", sum(first_visited), "blocks away")
first_visited
paste("Actually, Easter Bunny HQ is", sum(abs(first_visited)), "blocks away")
first_visited
paste("Actually, Easter Bunny HQ is", sum(first_visited), "blocks away")
